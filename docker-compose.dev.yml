version: '3.9'

x-app: &app
  env_file:
    - .env
  restart: always

volumes:
  dbdata:
  redis_data:
  es_logs:
  esdata:
  static_volume:

services:
  auth:
    container_name: auth
    build: auth_service
    <<: *app
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "auth-service"
    volumes:
      - ./auth_service:/auth_service
    expose:
      - 8082
    ports:
      - "8082:8082"
    depends_on:
      db:
        condition: service_healthy

  profile_service:
    container_name: profile_service
    build: ./profile_service
    <<: *app
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "profile-service"
    volumes:
      - ./profile_service:/profile_service
    expose:
      - 8084
    ports:
      - "8084:8084"
    depends_on:
      db:
        condition: service_healthy

  movie_service:
    container_name: movie_service
    build: ./movie_service
    <<: *app
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "movie-service"
    expose:
      - ${MOVIE_API_UVICORN_PORT}
    ports:
      - ${MOVIE_API_UVICORN_PORT}:${MOVIE_API_UVICORN_PORT}
    depends_on:
      db:
        condition: service_healthy

  api-migrations:
    build: auth_service
    <<: *app
    restart: "no"
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "api-migrations-service"
    volumes:
      - ./auth_service:/auth_service
    depends_on:
      db:
        condition: service_healthy
    command: alembic upgrade head

  profile-migrations:
    build: ./profile_service
    <<: *app
    restart: "no"
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "profile-migrations-service"
    volumes:
      - ./profile_service:/profile_service
    depends_on:
      db:
        condition: service_healthy
    command: alembic upgrade head

  db:
    image: ghcr.io/dbsystel/postgresql-partman:14
    container_name: db
    shm_size: 1g
    <<: *app
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "db"
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    depends_on:
      - logstash
      - elasticsearch
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5


  redis:
    image: redis:alpine
    container_name: redis
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "redis"
    expose:
      - 6379
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis_data:/var/lib/redis
    depends_on:
      - logstash
      - elasticsearch

  nginx:
    image: nginx:1.24
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "nginx"
    volumes:
      - ./infrastructure/tmp/logs/nginx/:/var/log/nginx/
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/configs/:/etc/nginx/conf.d/:ro
      - static_volume:/code/staticfiles
    depends_on:
      - auth
      - rate_limit
      - logstash
      - elasticsearch
    ports:
      - "80:80"

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    <<: *app
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "jaeger"
    ports:
      - ${JAEGER_UDP}:6831/udp
      - ${JAEGER_PORT}:16686
    command: [ "--log-level=debug" ]
    depends_on:
      - logstash
      - elasticsearch

  rate_limit:
    build: ./infrastructure/rate_limit
    <<: *app
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "rate-limit-service"
    volumes:
      - ./infrastructure:/rate_limit
    depends_on:
      - auth
      - logstash
      - elasticsearch

  logstash:
    image: logstash:8.10.2
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044/udp"
      - "9600:9600"  # Порт для проверки состояния
    volumes:
      - ./infrastructure/tmp/logs/nginx/:/var/log/nginx/:ro
      # - ./ELK/deploy/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elasticsearch:9200"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600/_node/stats" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  kibana:
    image: kibana:8.10.2
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  elasticsearch_db:
    image: elasticsearch:8.6.2
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:${LOGSTASH_PORT}"
        tag: "elasticsearch_db"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    expose:
      - 9200
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    depends_on:
      - logstash

  elasticsearch:
    image: elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms200m -Xmx200m"
    ports:
      - "9400:9200"
    #    volumes:
    #      - ./infrastructure/ELK/deploy/es_logs:/usr/share/elasticsearch/data
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -s -o /dev/null -w '%{http_code}' http://localhost:9200/_cluster/health | grep -q '200' || exit 1"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  admin_service:
    <<: *app
    build: ./admin_service
    container_name: admin_service
    volumes:
      - ./admin_service:/code
      - static_volume:/code/staticfiles
    ports:
      - "8080:8080"
    command: /start.sh
    depends_on:
      db:
        condition: service_healthy



